schema {
  query: Query
  mutation: Mutation
}

type CreateDayOff {
  ok: Boolean
  dayOff: DayOff
}

type DayOff implements Node {
  id: ID!
  userId: Int!
  approvedById: Int
  dayOffType: DayOffType!
  user: User
  approvedBy: User
}

type DayOffConnection {
  pageInfo: PageInfo!
  edges: [DayOffEdge]!
}

type DayOffEdge {
  node: DayOff
  cursor: String!
}

enum DayOffType {
  VACATION_PAID
  VACATION_UNPAID
  SICK_LEAVE
}

type Mutation {
  createDayOff(dayOffType: String): CreateDayOff
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  allUsers(before: String, after: String, first: Int, last: Int): UserConnection
  allDaysOff(before: String, after: String, first: Int, last: Int): DayOffConnection
}

type User implements Node {
  id: ID!
  username: String!
  password: String!
  daysOff(before: String, after: String, first: Int, last: Int): DayOffConnection
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
}

type UserEdge {
  node: User
  cursor: String!
}
