from application.rules.models import DayOffValidationPayload, LeaveDay
from application.balances.models import LeaveTypes
from application.workspace.models import WorkspaceUserRoles
import datetime

business_days_count = 0

rule calculate_business_days:
    when:
        $leave_day := LeaveDay(is_official_holiday != True and date.weekday() < 5)
    then:
        attribute business_days_count = business_days_count + 1

rule day_off_start_date_is_after_start_date_in_ws:
    when:
        $payload := DayOffValidationPayload( leave.start_date <= user_start_date )
    then:
        modify $payload:
            is_rejected = True
        $payload.errors.append("Your leave must start at you joined a workspace")

rule paid_leave_is_after_probation:
    when:
        $payload := DayOffValidationPayload( ((leave.start_date.year - user_start_date.year) * 12 + leave.start_date.month - user_start_date.month) <= 3 and leave.leave_type == LeaveTypes.VACATION_PAID)
    then:
        modify $payload:
            is_rejected = True
        $payload.errors.append("Your paid leave must start at least after 3 months of probation period")

rule leave_start_date_must_be_2_weeks_from_now:
    when:
        $payload := DayOffValidationPayload( (leave.start_date - datetime.date.today()).days < 14 and leave.leave_type != LeaveTypes.SICK_LEAVE)
    then:
        modify $payload:
            is_rejected = True
        $payload.errors.append("Leave must start at least 2 weeks from now")

rule doctors_note_needed_for_3_sick_leaves:
    when:
        $payload := DayOffValidationPayload(leave.leave_type == LeaveTypes.SICK_LEAVE)
    then:
        $payload.warnings.append("Our policies require a doctorâ€™s note if for sick leaves longer than 3 days")

rule leaves_longer_than_10_business_days:
    when:
        $payload := DayOffValidationPayload(business_days_count > 10)
    then:
        modify $payload:
            is_rejected = True
        $payload.errors.append("Planned leave cannot exceed 10 business days in a row")

rule day_off_start_date_is_after_start_date_in_ws:
    when:
        $payload := DayOffValidationPayload( leave.start_date >= leave.end_date )
    then:
        modify $payload:
            is_rejected = True
        $payload.errors.append("Start date should be before end date")

rule paid_leaves_precedent_over_unpaid:
    when:
        $payload := DayOffValidationPayload( leave.leave_type == LeaveTypes.VACATION_UNPAID and balance.left_paid_leaves > 0 )
    then:
        modify $payload:
            is_rejected = True
        $payload.errors.append("Unpaid leaves cannot be requested when paid leaves are available")

rule negative_balance_vacation_paid:
    when:
        $payload := DayOffValidationPayload( leave.leave_type == LeaveTypes.VACATION_PAID and business_days_count > balance.left_paid_leaves )
    then:
        modify $payload:
            is_rejected = True
        $payload.errors.append("Paid vacations balance exceeded")

rule negative_balance_vacation_unpaid:
    when:
        $payload := DayOffValidationPayload( leave.leave_type == LeaveTypes.VACATION_UNPAID and business_days_count > balance.left_unpaid_leaves )
    then:
        modify $payload:
            is_rejected = True
        $payload.errors.append("Unpaid vacations balance exceeded")

rule negative_balance_vacation_unpaid:
    when:
        $payload := DayOffValidationPayload( leave.leave_type == LeaveTypes.SICK_LEAVE and business_days_count > balance.left_sick_leaves )
    then:
        modify $payload:
            is_rejected = True
        $payload.errors.append("Sick leaves balance exceeded")


rule auto_approve_workspace_owner_leave:
    when:
        $payload := DayOffValidationPayload( WorkspaceUserRoles.OWNER in user_roles )

    then:
        $payload.leave.approved_by_id = $payload.leave.user_id
        $payload.notes.append("Automatically approved based on role")
