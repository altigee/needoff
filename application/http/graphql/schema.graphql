schema {
  query: Query
  mutation: Mutation
}

type Balance {
  id: ID!
  userId: Int!
  balanceType: String!
  amount: Int!
}

type CreateDayOff {
  ok: Boolean
  dayOff: DayOff
}

scalar DateTime

type DayOff {
  id: ID!
  userId: Int!
  approvedById: Int
  leaveType: String!
  startDate: String!
  endDate: String!
  workspaceId: Int!
  user: Profile
  approvedBy: Profile
  workspace: Workspace
}

type Mutation {
  createDayOff(endDate: String, leaveType: String, startDate: String, workspaceId: Int): CreateDayOff
  register(email: String, password: String): RegisterUser
}

type Profile {
  userId: ID!
  firstName: String!
  lastName: String!
  position: String!
  phone: String!
  email: String!
  user: User
}

type Query {
  userByName(email: String!): User
  myLeaves(workspaceId: Int!): [DayOff]
  myBalance: [Balance]
  balanceByUser(email: String!): [Balance]
  profile: Profile
  myWorkspaces: [Workspace]
}

type RegisterUser {
  ok: Boolean
  response: RegisterUserResponse
}

type RegisterUserResponse {
  id: Int
  email: String
}

type User {
  id: ID!
  createdTime: DateTime!
  email: String!
}

type Workspace {
  id: ID!
  name: String!
  description: String
  invitationLinkToken: String
}
